name: CI/CD Pipeline

env: 
  CONDITION: ${{ !contains(join(github.event.commits.*.message, ' '), '#skip') }} # Check if any commit message contains '#skip'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install
      - name: Run lint
        run: npm run eslint
      - name: Build
        run: npm run build
      - name: Run unit tests
        run: npm run test
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npm run test:e2e
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  tag_release:
    needs: [test_and_build]
    runs-on: ubuntu-20.04  
    if: ${{ github.event_name == 'push' && !contains(join(github.event.commits.*.message, ' '), '#skip') }} # Only deploy if commit message does not contain '#skip'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [test_and_build, tag_release]  # Wait for tests to pass first!
    concurrency: deploy-group
    if: ${{ github.event_name == 'push' && !contains(join(github.event.commits.*.message, ' '), '#skip') }}  # Only deploy if commit message does not contain '#skip'
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Run Fly
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  notify:
    - name: Notify Discord
      uses: Ilshidur/action-discord@master
      if: always()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: "App was deployed successfully!"